name: Release CLI
on:
  push:
    tags:
      - "Ver5*"
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runtime: linux-x64
          - os: ubuntu-latest
            runtime: linux-arm
          - os: windows-latest
            runtime: win-x64
          - os: macOS-latest
            runtime: osx-arm64

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use .NET 8.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'
  
      - name: Build
        run: cd CLI && dotnet publish --runtime ${{ matrix.runtime }} --configuration Release --self-contained true --output build_output
  
      - name: Copy ffmpeg.exe (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir CLI\\build_output\\plugins\\ffmpeg
          copy CLI\\plugins\\ffmpeg\\ffmpeg.exe CLI\\build_output\\plugins\\ffmpeg\\ffmpeg.exe
  
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DDTV-CLI-${{ matrix.os }}-${{ matrix.runtime }}
          path: CLI/build_output

      - name: Zip Artifacts
        if: matrix.os != 'windows-latest'
        run: |
          cd CLI/build_output
          zip -r ../../DDTV-CLI-${{ matrix.os }}-${{ matrix.runtime }}.zip *

      - name: Zip Artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path CLI\build_output\* -DestinationPath DDTV-CLI-${{ matrix.os }}-${{ matrix.runtime }}.zip

      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        with:
          files: DDTV-CLI-${{ matrix.os }}-${{ matrix.runtime }}.zip
