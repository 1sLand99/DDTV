name: Dev

on:
  push:
    tags:
      - "dev*"
      - "Ver*"
  pull_request:
    paths:
      - 'CLI/**'
      - '.github/workflows/DDTV_Dev_CLI.yml'
      - '!**/README.md'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runtime: linux-x64
          - os: ubuntu-latest
            runtime: linux-arm
          - os: windows-latest
            runtime: win-x64
          - os: macOS-latest
            runtime: osx-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use .NET 8.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: cd CLI && dotnet restore
  
      - name: Build
        run: cd CLI && dotnet publish --runtime ${{ matrix.runtime }} --configuration Release --self-contained true --output build_output/${{ matrix.runtime }}
  
      - name: Copy ffmpeg.exe (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir CLI\\build_output\\${{ matrix.runtime }}\\plugins\\ffmpeg
          copy CLI\\plugins\\ffmpeg\\ffmpeg.exe CLI\\build_output\\${{ matrix.runtime }}\\plugins\\ffmpeg\\ffmpeg.exe
  
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DDTV-CLI-${{ matrix.os }}-${{ matrix.runtime }}
          path: CLI/build_output/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/Ver')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: DDTV-CLI-ubuntu-latest-linux-x64
          path: artifacts/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/DDTV-CLI-ubuntu-latest-linux-x64.zip
          asset_name: DDTV-CLI-ubuntu-latest-linux-x64.zip
          asset_content_type: application/zip
